var AssessmentEditView,_ref,__bind=function(a,b){return function(){return a.apply(b,arguments);};},__hasProp={}.hasOwnProperty,__extends=function(d,b){for(var a in b){if(__hasProp.call(b,a)){d[a]=b[a];
}}function c(){this.constructor=d;}c.prototype=b.prototype;d.prototype=new c();d.__super__=b.prototype;return d;};AssessmentEditView=(function(b){__extends(a,b);
function a(){this.updateSubtestLegend=__bind(this.updateSubtestLegend,this);this.render=__bind(this.render,this);this.saveNewSubtest=__bind(this.saveNewSubtest,this);
this.updateModel=__bind(this.updateModel,this);this.save=__bind(this.save,this);_ref=a.__super__.constructor.apply(this,arguments);return _ref;}a.prototype.className="assessment_edit_view";
a.prototype.events={"click #archive_buttons input":"save","click .back":"back","click .new_subtest_button":"toggleNewSubtestForm","click .new_subtest_cancel":"toggleNewSubtestForm","keypress #new_subtest_name":"saveNewSubtest","click .new_subtest_save":"saveNewSubtest","keypress #basic input":"showSave","click .assessment_save":"save","click .save":"save"};
a.prototype.save=function(){if(this.updateModel()){if(this.model.save(null,{wait:true})){Utils.midAlert("Assessment saved");Tangerine.router.navigate("edit/"+this.model.id,true);
return this.hideSave();}}};a.prototype.showSave=function(){return this.$el.find(".assessment_save").fadeIn(250);};a.prototype.hideSave=function(){return this.$el.find(".assessment_save").fadeToggle(250);
};a.prototype.back=function(){return Tangerine.router.navigate("assessments/"+(this.model.get("group")),true);};a.prototype.updateModel=function(){var s,m,e,n,l,h,d,p,r,o,f,k,g,q,c;
r=$.trim(this.$el.find("#sequences").val());p=r.split("\n");for(n=k=0,q=p.length;k<q;n=++k){h=p[n];h=h.split(",");for(l=g=0,c=h.length;g<c;l=++g){m=h[l];
h[l]=parseInt(m);}p[n]=h;if(h.length>this.model.subtests.models.length){f=true;}if(h.length<this.model.subtests.models.length){o=true;}if(h.length!==_.uniq(h).length){s=true;
}}d=[];if(f){d.push("Some sequences are longer than the total number of all subtests.");}if(o){d.push("Some sequences are shorter than the total number of all subtests.");
}if(s){d.push("Some sequences contain doubles.");}if(d.length!==0){alert("Warning\n\n"+(d.join("\n")));}e=Tangerine.user.get("groups");if(!~e.indexOf(this.$el.find("#assessment_group").val())){alert("Warning\n\nYou cannot join a group unless you are a member of that group.");
this.$el.find("#assessment_group").val(this.model.escape("group"));this.hideSave();return false;}else{this.model.set({sequences:p,archived:this.$el.find("#archive_buttons input:checked").val()==="true",name:this.$el.find("#assessment_name").val(),group:this.$el.find("#assessment_group").val(),dKey:this.$el.find("#assessment_d_key").val(),assessmentId:this.model.id});
return true;}};a.prototype.toggleNewSubtestForm=function(c){var d=this;this.$el.find(".new_subtest_form, .new_subtest_button").fadeToggle(250,function(){d.$el.find("#new_subtest_name").val("");
return d.$el.find("#subtest_type_select").val("none");});return false;};a.prototype.saveNewSubtest=function(g){var h,d,e,c,f;if(g.type!=="click"&&g.which!==13){return true;
}h=Tangerine.templates.subtestTemplate;e=Tangerine.templates.prototypeTemplates[this.$el.find("#subtest_type_select").val()];c=this.$el.find("#subtest_type_select :selected").attr("data-template");
f=Tangerine.templates.subtestTemplates[this.$el.find("#subtest_type_select").val()][c];h=$.extend(h,e);h=$.extend(h,f);h=$.extend(h,{name:this.$el.find("#new_subtest_name").val(),assessmentId:this.model.id,order:this.model.subtests.length});
d=this.model.subtests.create(h);this.toggleNewSubtestForm();return false;};a.prototype.initialize=function(c){this.model=c.model;this.subtestListEditView=new SubtestListEditView({assessment:this.model});
this.model.subtests.on("change remove",this.subtestListEditView.render);return this.model.subtests.on("all",this.updateSubtestLegend);};a.prototype.render=function(){var j,d,h,r,k,o,g,n,m,c,q,f,p,e,l=this;
o="";if(this.model.has("sequences")){o=this.model.get("sequences");o=o.join("\n");if(_.isArray(o)){for(h=f=0,p=o.length;f<p;h=++f){o=o[h];o[h]=o.join(", ");
}}}m=this.updateSubtestLegend();j=this.model.get("archived");d=j===true||j==="true"?"checked":"";k=d?"":"checked";c="<select id='subtest_type_select'>      <option value='none' disabled='disabled' selected='selected'>Please select a subtest type</option>";
e=Tangerine.templates.subtestTemplates;for(r in e){q=e[r];c+="<optgroup label='"+r+"'>";for(g in q){n=q[g];c+="<option value='"+r+"' data-template='"+g+"'>"+g+"</option>";
}c+="</optgroup>";}c+="</select>";this.$el.html("      <button class='back navigation'>Back</button>        <h1>Assessment Builder</h1>      <div id='basic'>        <label for='assessment_name'>Name</label>        <input id='assessment_name' value='"+(this.model.escape("name"))+"'>        <label for='assessment_group'>Group</label>        <input id='assessment_group' value='"+(this.model.escape("group"))+"'>        <button class='assessment_save confirmation'>Save</button><br>        <label for='assessment_d_key' title='This key is used to import the assessment from a tablet'>Download Key</label><br>        <div class='info_box'>"+(this.model.id.substr(-5,5))+"</div>      </div>      <label title='Only active assessments will be displayed in the main assessment list.'>Status</label><br>      <div id='archive_buttons' class='buttonset'>        <input type='radio' id='archive_false' name='archive' value='false' "+k+"><label for='archive_false'>Active</label>        <input type='radio' id='archive_true'  name='archive' value='true'  "+d+"><label for='archive_true'>Archived</label>      </div>      <h2>Subtests</h2>      <div class='menu_box'>        <div>        <ul id='subtest_list'>        </ul>        </div>        <button class='new_subtest_button command'>Add Subtest</button>        <div class='new_subtest_form confirmation'>          <div class='menu_box'>            <h2>New Subtest</h2>            <label for='subtest_type_select'>Type</label><br>            "+c+"<br>            <label for='new_subtest_name'>Name</label><br>            <input type='text' id='new_subtest_name'>            <button class='new_subtest_save command'>Add</button> <button class='new_subtest_cancel command'>Cancel</button>          </div>        </div>      </div>      <h2>Options</h2>      <div class='label_value'>        <label for='sequences' title='This is a list of acceptable orders of subtests, which will be randomly selected each time an assessment is run. Subtest indicies are separated by commas, new lines separate sequences. '>Random Sequences</label>        <div id='subtest_legend'>"+m+"</div>        <textarea id='sequences'>"+o+"</textarea>      </div>      <button class='save command'>Save</button>      ");
this.subtestListEditView.setElement(this.$el.find("#subtest_list"));this.subtestListEditView.render();this.$el.find("#subtest_list").sortable({handle:".sortable_handle",start:function(i,s){return s.item.addClass("drag_shadow");
},stop:function(i,s){return s.item.removeClass("drag_shadow");},update:function(u,v){var x,i,t,s,w;w=(function(){var A,z,B,y;B=this.$el.find("#subtest_list li");
y=[];for(A=0,z=B.length;A<z;A++){i=B[A];y.push($(i).attr("data-id"));}return y;}).call(l);for(h=t=0,s=w.length;t<s;h=++t){x=w[h];l.model.subtests.get(x).set({order:h},{silent:true}).save(null,{silent:true});
}return l.model.subtests.sort();}});return this.trigger("rendered");};a.prototype.updateSubtestLegend=function(){var d,c;c="";this.model.subtests.each(function(f,e){return c+="<div class='small_grey'>"+e+" - "+(f.get("name"))+"</div><br>";
});d=this.$el.find("#subtest_legend");if(d.length!==0){d.html(c);}return c;};a.prototype.onClose=function(){return this.subtestListEditView.close();};return a;
})(Backbone.View);