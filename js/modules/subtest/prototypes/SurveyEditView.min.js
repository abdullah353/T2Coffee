var SurveyEditView,_ref,__bind=function(a,b){return function(){return a.apply(b,arguments);};},__hasProp={}.hasOwnProperty,__extends=function(d,b){for(var a in b){if(__hasProp.call(b,a)){d[a]=b[a];
}}function c(){this.constructor=d;}c.prototype=b.prototype;d.prototype=new c();d.__super__=b.prototype;return d;};SurveyEditView=(function(b){__extends(a,b);
function a(){this.renderQuestions=__bind(this.renderQuestions,this);this.toggleAddQuestion=__bind(this.toggleAddQuestion,this);_ref=a.__super__.constructor.apply(this,arguments);
return _ref;}a.prototype.events={"click .add_question":"toggleAddQuestion","click .add_question_cancel":"toggleAddQuestion","click .add_question_add":"addQuestion","keypress #question_name":"addQuestion"};
a.prototype.initialize=function(c){var d=this;this.model=c.model;this.parent=c.parent;this.model.questions=new Questions;return this.model.questions.fetch({key:this.model.get("assessmentId"),success:function(){d.model.questions=new Questions(d.model.questions.where({subtestId:d.model.id}));
d.model.questions.maintainOrder();d.questionsEditView=new QuestionsEditView({questions:d.model.questions});d.model.questions.on("change",d.renderQuestions);
return d.renderQuestions();}});};a.prototype.toggleAddQuestion=function(){var c=this;this.$el.find("#add_question_form, .add_question").fadeToggle(250,function(){if(c.$el.find("#add_question_form").is(":visible")){return c.$el.find("#question_prompt").focus();
}});return false;};a.prototype.addQuestion=function(c){var e,d;if(c.type!=="click"&&c.which!==13){return true;}e=$.extend(Tangerine.templates.questionTemplate,{subtestId:this.model.id,assessmentId:this.model.get("assessmentId"),id:Utils.guid(),order:this.model.questions.length,prompt:this.$el.find("#question_prompt").val(),name:this.$el.find("#question_name").val().safetyDance()});
d=this.model.questions.create(e);this.renderQuestions();this.$el.find("#add_question_form input").val("");this.$el.find("#question_prompt").focus();return false;
};a.prototype.save=function(){var o,j,k,m,f,n,c,g,l,h,e,d;this.model.set({gridLinkId:this.$el.find("#link_select option:selected").val()});k=[];o=[];n=[];
e=this.model.questions.models;for(j=g=0,l=e.length;g<l;j=++g){f=e[j];if(f.get("type")!=="open"&&f.get("options").length===0){o.push(j+1);}if(!f.save()){k.push(j);
}if(f.has("linkedGridScore")&&f.get("linkedGridScore")!==""&&f.get("linkedGridScore")!==0&&this.model.has("gridLinkId")===""&&this.model.get("gridLinkId")===""){n.push(j);
}}if(k.length!==0){Utils.midAlert("Error<br><br>Questions: <br>"+(k.join(", "))+"<br>not saved");}if(o.length!==0){m=o.length>1;h=m?"Questions":"Question";
c=m?"have":"has";alert("Warning\n\n"+h+" "+(o.join(" ,"))+" "+c+" no options.");}if(n.length!==0){m=o.length>1;h=m?"Questions":"Question";d=m?"require":"requires";
return alert("Warning\n\n"+h+" "+(n.join(" ,"))+" "+d+" a grid to be linked to this test.");}};a.prototype.onClose=function(){var c;return(c=this.questionsListEdit)!=null?c.close():void 0;
};a.prototype.renderQuestions=function(){var c,d;this.$el.find("#question_list_wrapper").empty();if((c=this.questionsEditView)!=null){c.render();}return this.$el.find("#question_list_wrapper").append((d=this.questionsEditView)!=null?d.el:void 0);
};a.prototype.render=function(){var c,e,d=this;c=this.model.get("gridLinkId")||"";this.$el.html("      <div id='grid_link'></div>      <div id='questions'>        <h2>Questions</h2>        <div class='menu_box'>          <div id='question_list_wrapper'><img class='loading' src='images/loading.gif'></div>          <button class='add_question command'>Add Question</button>          <div id='add_question_form' class='confirmation'>            <div class='menu_box'>              <h2>New Question</h2>              <label for='question_prompt'>Prompt</label>              <input id='question_prompt'>              <label for='question_name'>Variable name</label>              <input id='question_name' title='Allowed characters: A-Z, a-z, 0-9, and underscores.'><br>              <button class='add_question_add command'>Add</button><button class='add_question_cancel command'>Cancel</button>            </div>          </div>         </div>      </div>");
this.renderQuestions();e=new Subtests;return e.fetch({key:this.model.get("assessmentId"),success:function(j){var g,h,i,f;j=j.where({prototype:"grid"});
g="          <div class='label_value'>            <label for='link_select'>Linked to grid</label><br>            <div class='menu_box'>              <select id='link_select'>              <option value=''>None</option>";
for(i=0,f=j.length;i<f;i++){h=j[i];g+="<option value='"+h.id+"' "+(c===h.id?"selected":"")+">"+(h.get("name"))+"</option>";}g+="</select></div></div>";
return d.$el.find("#grid_link").html(g);}});};return a;})(Backbone.View);