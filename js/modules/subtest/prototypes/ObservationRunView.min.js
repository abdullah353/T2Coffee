var ObservationRunView,_ref,__bind=function(a,b){return function(){return a.apply(b,arguments);};},__hasProp={}.hasOwnProperty,__extends=function(d,b){for(var a in b){if(__hasProp.call(b,a)){d[a]=b[a];
}}function c(){this.constructor=d;}c.prototype=b.prototype;d.prototype=new c();d.__super__=b.prototype;return d;};ObservationRunView=(function(b){__extends(a,b);
function a(){this.saveCurrentSurvey=__bind(this.saveCurrentSurvey,this);this.updateObservationIndex=__bind(this.updateObservationIndex,this);this.checkSurveyDisplay=__bind(this.checkSurveyDisplay,this);
this.checkIfOver=__bind(this.checkIfOver,this);this.checkWarning=__bind(this.checkWarning,this);this.checkObservationPace=__bind(this.checkObservationPace,this);
this.tick=__bind(this.tick,this);_ref=a.__super__.constructor.apply(this,arguments);return _ref;}a.prototype.events={"click .start_time":"startObservations","click .stop_time":"stopObservations","click .done":"completeObservation"};
a.FORCE=1;a.prototype.initialize=function(c){this.model=this.options.model;this.parent=this.options.parent;this.warningSeconds=5;this.initializeFlags();
return this.initializeSurvey();};a.prototype.initializeSurvey=function(){var c,d,e;if(this.survey!=null){this.onClose();}c=$.extend(this.model.get("surveyAttributes"),{_id:this.model.id});
e=(function(){var h,f,g;g=[];for(d=h=1,f=parseInt(this.model.get("totalSeconds")/this.model.get("intervalLength"));1<=f?h<=f:h>=f;d=1<=f?++h:--h){g.push(new Backbone.Model(c));
}return g;}).call(this);e.unshift("");this.skippableView=new SurveyRunView({model:e[1],parent:this,isObservation:true});return this.survey={models:e,results:[]};
};a.prototype.initializeFlags=function(){this.iAm={counting:false,recording:false};this.iHavent={warned:true};this.iHave={runOnce:false,finished:false};
return this.my={time:{start:0,elapsed:0},observation:{index:0,oldIndex:0,completed:0,total:parseInt(this.model.get("totalSeconds")/this.model.get("intervalLength"))}};
};a.prototype.startObservations=function(){if(this.iAm.counting||this.iHave.runOnce){return;}this.$el.find(".stop_button_wrapper, .next_display, .completed_display").removeClass("confirmation");
this.$el.find(".start_button_wrapper").addClass("confirmation");this.timerInterval=setInterval(this.tick,1000);this.iAm.counting=true;this.my.time.start=this.getTime();
return this.my.time.elapsed=0;};a.prototype.stopObservations=function(f){var d,c;clearInterval(this.timerInterval);d=f!=null;c=f==null;if(f!=null){this.trigger("showNext");
}if(c&&!this.iHave.finished){if(this.iAm.recording){this.resetObservationFlags();this.saveCurrentSurvey();}this.my.observation.index++;this.renderSurvey();
}else{this.$el.find(".stop_button_wrapper").addClass("confirmation");Utils.midAlert("Observations finished");}this.$el.find(".next_display").addClass("confirmation");
this.iHave.finished=true;return this.iHave.runOnce=true;};a.prototype.tick=function(){this.my.time.elapsed=this.getTime()-this.my.time.start;this.checkIfOver();
this.updateObservationIndex();this.updateProgressDisplay();this.checkSurveyDisplay();this.checkObservationPace();return this.checkWarning();};a.prototype.checkObservationPace=function(){if(this.iAm.recording&&this.my.observation.completed<(this.my.observation.index-1)&&this.my.observation.index!==0){this.iHave.forcedProgression=true;
this.resetObservationFlags();this.saveCurrentSurvey();return this.renderSurvey();}};a.prototype.checkWarning=function(){var c,d;d=Math.floor((this.my.time.elapsed+this.warningSeconds)/this.model.get("intervalLength"));
c=this.my.observation.index<d&&!this.iHave.finished;if(this.iAm.recording&&this.iHavent.warned&&c&&this.my.observation.index!==0){Utils.midAlert("Observation ending soon");
return this.iHavent.warned=false;}};a.prototype.gridWasAutostopped=function(){return false;};a.prototype.checkIfOver=function(){if(this.my.time.elapsed>=this.model.get("totalSeconds")){return this.stopObservations();
}};a.prototype.checkSurveyDisplay=function(){if(this.my.observation.oldIndex!==this.my.observation.index&&!this.iHave.finished&&!this.iAm.recording){this.renderSurvey();
return this.my.observation.oldIndex=this.my.observation.index;}};a.prototype.updateObservationIndex=function(){this.my.observation.index=Math.floor(this.my.time.elapsed/this.model.get("intervalLength"));
if(this.my.observation.index>this.survey.models.length-1){return this.my.observation.index=this.survey.models.length-1;}};a.prototype.updateProgressDisplay=function(){var c;
this.$el.find(".current_observation").html(this.my.observation.index);this.$el.find(".completed_count").html(this.my.observation.completed);c=Math.max(((this.my.observation.index+1)*this.model.get("intervalLength"))-this.my.time.elapsed,0);
this.$el.find(".time_till_next").html(c);if(!this.iAm.recording&&!this.iHave.finished){return this.$el.find(".next_display, .completed_display").removeClass("confirmation");
}};a.prototype.resetObservationFlags=function(){this.iAm.recording=false;return this.iHavent.warned=true;};a.prototype.getTime=function(){return parseInt((new Date()).getTime()/1000);
};a.prototype.completeObservation=function(c){if(this.survey.view.isValid()){this.saveCurrentSurvey();if(this.iHave.finished){this.trigger("showNext");
}}else{this.survey.view.showErrors();}return this.tick();};a.prototype.saveCurrentSurvey=function(){this.resetObservationFlags();this.my.observation.completed++;
this.survey.results.push({observationNumber:this.survey.view.index,data:this.survey.view.getResult(),saveTime:this.my.time.elapsed});this.survey.view.close();
return this.$el.find(".done").remove();};a.prototype.render=function(){var c;this.trigger("hideNext");c=this.model.get("totalSeconds");this.$el.html("      <div class='timer_wrapper'>        <div class='progress clearfix'>          <span class='completed_display confirmation'>Completed <div class='info_box completed_count'>"+this.my.observation.completed+"</div></span>          <span class='next_display confirmation'>Next observation <div class='info_box time_till_next'>"+(this.model.get("intervalLength"))+"</div></span>        </div>        <div>          <div class='start_button_wrapper'><button class='start_time command'>Start</button></div>          <div class='stop_button_wrapper confirmation'><button class='stop_time command'>Abort <i>all</i> observations</button></div>        </div>      </div>      <div id='current_survey'></div>    ");
return this.trigger("rendered");};a.prototype.renderSurvey=function(c){var d=this;if(!this.iAm.counting){return;}this.iAm.recording=true;this.survey.view=new SurveyRunView({model:this.survey.models[this.my.observation.index],parent:this,isObservation:true});
this.survey.view.index=(function(){return d.my.observation.index;})();this.survey.view.on("rendered subRendered",function(){return d.trigger("subRendered");
});this.survey.view.render();this.$el.find("#current_survey").html("<span class='observation_display confirmation'>Observation <div class='info_box current_observation'>"+this.my.observation.index+"</div></span>");
this.$el.find("#current_survey").append(this.survey.view.el);this.$el.find("#current_survey").append("<button class='command done'>Done with <i>this</i> observation</button>");
return this.$el.find("#current_survey").scrollTo(250,function(){if(d.iHave.forcedProgression){Utils.midAlert("Please continue with the next observation.");
return d.iHave.forcedProgression=false;}else{if(d.iHave.finished){return Utils.midAlert("Please enter last observation");}}});};a.prototype.onClose=function(){var c;
if((c=this.survey.view)!=null){c.close();}return this.skippableView.close();};a.prototype.getResult=function(){return{surveys:this.survey.results,variableName:this.model.get("variableName"),totalTime:this.model.get("totalTime"),intervalLength:this.model.get("intervalTime"),completedObservations:this.my.observation.completed};
};a.prototype.getSum=function(){return{total:this.my.observation.completed};};a.prototype.getSkipped=function(){var e,f,d,g,c;d=this.skippableView.getSkipped();
f=[];for(e=g=1,c=this.survey.models.length-1;1<=c?g<=c:g>=c;e=1<=c?++g:--g){f.push({observationNumber:e,data:d,saveTime:"skipped"});}return{surveys:f,variableName:"skipped",totalTime:"skipped",intervalLength:"skipped",completedObservations:"skipped"};
};a.prototype.isValid=function(){return this.iHave.finished;};a.prototype.showErrors=function(){return this.$el.find("messages").html(this.validator.getErrors().join(", "));
};a.prototype.updateNavigation=function(){return Tangerine.nav.setStudent(this.$el.find("#participant_id").val());};return a;})(Backbone.View);