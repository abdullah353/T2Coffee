var QuestionPrintView,_ref,__hasProp={}.hasOwnProperty,__extends=function(d,b){for(var a in b){if(__hasProp.call(b,a)){d[a]=b[a];}}function c(){this.constructor=d;
}c.prototype=b.prototype;d.prototype=new c();d.__super__=b.prototype;return d;};QuestionPrintView=(function(a){__extends(b,a);function b(){_ref=b.__super__.constructor.apply(this,arguments);
return _ref;}b.prototype.className="question buttonset";b.prototype.initialize=function(c){this.model=c.model;this.answer={};this.name=this.model.escape("name").replace(/[^A-Za-z0-9_]/g,"-");
this.type=this.model.get("type");this.options=this.model.get("options");this.notAsked=c.notAsked;this.isObservation=c.isObservation;if(this.model.get("skippable")==="true"||this.model.get("skippable")===true){this.isValid=true;
this.skipped=true;}else{this.isValid=false;this.skipped=false;}if(this.notAsked===true){this.isValid=true;return this.updateResult();}};b.prototype.update=function(c){this.updateResult();
this.updateValidity();return this.trigger("answer",c,this.model.get("order"));};b.prototype.render=function(){this.$el.attr("id","question-"+this.name);
if(!this.notAsked){this.$el.html("        Prompt: "+(this.model.get("prompt"))+"<br/>        Variable Name: "+(this.model.get("name"))+"<br/>        Hint: "+(this.model.get("hint"))+"<br/>        Type: "+(this.model.get("type"))+"<br/>        Options:<br/>        "+(_.map(this.model.get("options"),function(c){return"Label: "+c.label+", Value: "+c.value;
}).join("<br/>"))+"<br/>      ");}else{this.$el.hide();}return this.trigger("rendered");};return b;})(Backbone.View);