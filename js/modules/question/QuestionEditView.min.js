var QuestionEditView,_ref,__bind=function(a,b){return function(){return a.apply(b,arguments);};},__hasProp={}.hasOwnProperty,__extends=function(d,b){for(var a in b){if(__hasProp.call(b,a)){d[a]=b[a];
}}function c(){this.constructor=d;}c.prototype=b.prototype;d.prototype=new c();d.__super__=b.prototype;return d;};QuestionEditView=(function(b){__extends(a,b);
function a(){this.updateModel=__bind(this.updateModel,this);this.goBack=__bind(this.goBack,this);_ref=a.__super__.constructor.apply(this,arguments);return _ref;
}a.prototype.className="question_list_element";a.prototype.events={"click .back":"goBack","click .done":"done","click .add_option":"addOption","click .delete_option":"showDeleteConfirm","click .delete_cancel":"hideDeleteConfirm","click .delete_delete":"deleteOption","click #question_type input:radio":"changeQuestionType",keypress:"hijackEnter","change .option_select":"templateFill","keypress .option_value":"quickAddWithEnter","keypress .option_label":"quickFocusValue"};
a.prototype.quickAddWithEnter=function(c){if((c.keyCode!=null)&&c.keyCode!==13){return true;}return this.addOption();};a.prototype.quickFocusValue=function(c){if((c.keyCode!=null)&&c.keyCode!==13){return true;
}return $(c.target).parent().find(".option_value").focus();};a.prototype.templateFill=function(d){var c;c=$(d.target).find("option:selected").attr("data-index");
this.question.set("options",Tangerine.templates.optionTemplates[c].options);this.$el.find("#option_list_wrapper").html(this.getOptionList());return false;
};a.prototype.goBack=function(){Tangerine.router.navigate("subtest/"+(this.question.get("subtestId")),true);return false;};a.prototype.initialize=function(c){this.question=c.question;
this.subtest=c.subtest;return this.assessment=c.assessment;};a.prototype.getOptionList=function(){var f,e,g,d,h,c;d=this.question.get("options");f="<div id='option_list_wrapper'>      <h2>Options</h2>      <div class='menu_box'>        <ul class='option_list'>";
for(e=h=0,c=d.length;h<c;e=++h){g=d[e];f+="      <li class='question'>        <table><tr><td>          <img src='images/icon_drag.png' class='sortable_handle'>        </td>        <td>          <div style='display: block;'>            <div class='option_label_value'>              <label class='edit' for='options."+e+".label'>Label</label>              <input id='options."+e+".label' value='"+(_.escape(g.label))+"' placeholder='Option label' class='option_label'><br>              <label class='edit' for='options."+e+".value' title='Allowed characters&#58; A-Z, a-z, 0-9, and underscores.'>Value</label>              <input id='options."+e+".value' value='"+(_.escape(g.value))+"' placeholder='Option value' class='option_value'><br>            </div>            <img src='images/icon_delete.png' class='delete_option' data-index='"+e+"'>            <div class='confirmation delete_confirm_"+e+"'>              <button class='delete_delete command_red' data-index='"+e+"'>Delete</button>              <button data-index='"+e+"' class='delete_cancel command'>Cancel</button>            </div>          </div>        </td></tr></table>      </li>      ";
}return f+="</ul>      <button class='add_option command'>Add option</button>      </div>    </div>";};a.prototype.addOption=function(){var c,d;this.updateModel();
d=this.question.get("options");d.push({label:"",value:""});this.question.set("options",d);this.$el.find("#option_list_wrapper").html(this.getOptionList());
c=this.$el.find("#option_list_wrapper li");if(c.length!==0){return $(c.last()).scrollTo().find("input:first").focus();}};a.prototype.render=function(){var j,n,m,r,s,u,l,g,e,o,h,p,k,f,c,t,d,q=this;
j=this.assessment.escape("name");k=this.subtest.escape("name");u=this.question.escape("name")||"";o=this.question.escape("prompt")||"";m=this.question.escape("hint")||"";
h=this.question.escape("skipLogic")||"";f=this.question.get("type");e=this.question.get("options");s=this.question.get("linkedGridScore")||0;p=this.question.get("skippable")===true||this.question.get("skippable")==="true";
n=f==="multiple"?"checkbox":"radio";this.$el.html("      <button class='back navigation'>Back</button>      <h1>Question Editor</h1>      <table class='basic_info'>        <tr>          <th>Subtest</th>          <td>"+k+"</td>        </tr>        <tr>          <th>Assessment</th>          <td>"+j+"</td>        </tr>      </table>      <button class='done command'>Done</button>      <div class='edit_form'>        <div class='label_value'>          <label for='name'>Variable name</label>          <input id='name' type='text' value='"+u+"'>        </div>        <div class='label_value'>          <label for='prompt'>Prompt</label>          <input id='prompt' type='text' value='"+o+"'>        </div>        <div class='label_value'>          <label for='hint'>Hint</label>          <input id='hint' type='text' value='"+m+"'>        </div>        <div class='label_value'>          <label for='skip-logic'>Skip if <span style='font-size: small;font-weight:normal'>example: ResultOfQuestion(\"maze1\") isnt \"2\"</span></label>          <input id='skip-logic' type='text' value='"+h+"'>        </div>        <div class='label_value'>          <label>Skippable</label>          <div id='skip_radio' class='buttonset'>            <label for='skip_true'>Yes</label><input name='skippable' type='radio' value='true' id='skip_true' "+(p?"checked":void 0)+">            <label for='skip_false'>No</label><input name='skippable' type='radio' value='false' id='skip_false' "+(!p?"checked":void 0)+">          </div>        </div>        <div class='label_value'>          <label for='linked_grid_score'>Items attempted required on linked grid</label>          <input id='linked_grid_score' type='number' value='"+s+"'>        </div>        <div class='label_value' id='question_type' class='question_type'>          <label>Question Type</label>          <div class='buttonset'>            <label for='single'>single</label>            <input id='single' name='type' type='radio' value='single' "+(f==="single"?"checked":void 0)+">            <label for='multiple'>multiple</label>            <input id='multiple' name='type'  type='radio' value='multiple' "+(f==="multiple"?"checked":void 0)+">            <label for='open'>open</label>            <input id='open' name='type'  type='radio' value='open' "+(f==="open"?"checked":void 0)+">          </div>        </div>        ");
if(f!=="open"){g="        <div class='label_value'>        <label for='question_template_select'>Fill from template</label><br>        <div class='menu_box'>          <select id='question_template_select' class='option_select'>            <option disabled selected>Select template</option>        ";
d=Tangerine.templates.optionTemplates;for(r=c=0,t=d.length;c<t;r=++c){l=d[r];g+="<option data-index='"+r+"' class='template_option'>"+l.name+"</option>";
}g+="</select>        </div>        <div id='option_list_wrapper'>"+(this.getOptionList())+"</div>        ";this.$el.append(g);this.$el.find(".option_list").sortable({handle:".sortable_handle",start:function(i,v){return v.item.addClass("drag_shadow");
},stop:function(i,v){return v.item.removeClass("drag_shadow");},update:function(i,v){return q.updateModel();}});}this.$el.append("<button class='done command'>Done</button>      </div>      ");
return this.trigger("rendered");};a.prototype.hijackEnter=function(c){if(c.which===13){this.$el.find(c.target).blur();return false;}};a.prototype.changeQuestionType=function(d){var c;
c=$(d.target);if((c.val()!=="open"&&this.question.get("type")==="open")||(c.val()==="open"&&this.question.get("type")!=="open")){this.updateModel();this.question.set("type",c.val());
this.question.set("options",[]);return this.render();}};a.prototype.done=function(){this.updateModel();if(this.question.save()){Utils.midAlert("Question Saved");
setTimeout(this.goBack,500);}else{Utils.midAlert("Save error");}return false;};a.prototype.updateModel=function(){var d,f,h,j,k,l,g,c,e;this.question.set({prompt:this.$el.find("#prompt").val(),name:this.$el.find("#name").val().safetyDance(),hint:this.$el.find("#hint").val(),skipLogic:this.$el.find("#skip-logic").val(),linkedGridScore:parseInt(this.$el.find("#linked_grid_score").val()),type:this.$el.find("#question_type input:checked").val(),skippable:this.$el.find("#skip_radio input:radio[name=skippable]:checked").val()==="true"});
l=[];d=0;k=this.$el.find(".option_list li");for(c=0,e=k.length;c<e;c++){j=k[c];f=$(j).find(".option_label").val();g=$(j).find(".option_value").val().safetyDance();
if((f!=null)||(g!=null)){l[d]={label:f,value:g};d++;}}if(l.length!==0){h=l.pop();if(h.label!==""&&h.value!==""){l.push(h);}}return this.question.set("options",l);
};a.prototype.showDeleteConfirm=function(c){return this.$el.find(".delete_confirm_"+(this.$el.find(c.target).attr("data-index"))).fadeIn(250);};a.prototype.hideDeleteConfirm=function(c){return this.$el.find(".delete_confirm_"+(this.$el.find(c.target).attr("data-index"))).fadeOut(250);
};a.prototype.deleteOption=function(d){var c;this.updateModel();c=this.question.get("options");c.splice(this.$el.find(d.target).attr("data-index"),1);this.question.set("options",c);
this.question.save();this.render(false);return false;};return a;})(Backbone.View);